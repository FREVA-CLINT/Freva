#!/usr/bin/env python
# encoding: utf-8
'''
#tets
find_files -- find files from the miklip baselines

@copyright:  2012 FU Berlin. All rights reserved.
        
@contact:    estanislao.gonzalez@met.fu-berlin.de

@license:    BSD

Copyright (c) 2012, FU Berlin
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this 
    list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY 
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.
'''

import sys
import getopt
import logging

log = logging.getLogger(__name__)
if not log.handlers:
    class SpecialFormatter(logging.Formatter):
        FORMATS = {logging.DEBUG :"DBG: %(module)s: %(lineno)d: %(message)s",
                   logging.ERROR : "ERROR: %(message)s",
                   logging.INFO : "%(message)s",
                   'DEFAULT' : "%(levelname)s: %(message)s"}
    
        def format(self, record):
            self._fmt = self.FORMATS.get(record.levelno, self.FORMATS['DEFAULT'])
            return logging.Formatter.format(self, record)
        
    hdlr = logging.StreamHandler(sys.stderr)
    hdlr.setFormatter(SpecialFormatter())
    logging.root.addHandler(hdlr)
    logging.root.setLevel(logging.INFO)
    

import evaluation_system.api.plugin_manager as pm
from evaluation_system.model.db import HistoryEntry
from evaluation_system.misc.utils import find_similar_words
from evaluation_system.model import user

__version__ = 0.4
__date__ = '2012-11-26'
__updated__ = '2012-12-11'



class AnalyzeError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg, show_help=True):
        super(AnalyzeError).__init__(type(self))
        self.msg = " %s\nUse --help to get help." % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def call(cmd_str):
    from subprocess import Popen, PIPE
    return Popen(cmd_str.split(), stdout=PIPE, stderr=PIPE).communicate()
    
def getEnvironment():
    """Parses required variablems from the environment and return a dictionary of them"""
    result = {}
    console_size = call('stty size')[0]
    if console_size:
        rows, columns = console_size.strip().split()
        rows, columns = int(rows), int(columns)
    else:
        rows, columns = 25, 80
    
    result['rows'] = rows
    result['columns'] = columns
    return result

def auto_doc(message=None):
    import re, os
    script_file = sys.argv[0]
    script_name = os.path.basename(script_file)
    #check if in unit tests (runfiles.py is starting the unit test)
    if script_name == 'runfiles.py':
        print "No auto doc for unit test."
        return
    
    re_start = re.compile('.*\*!!!\*$')
    re_end = re.compile('^[ \t]*$')
    re_entries= re.compile("^[^']*'([^']*)'[^']*(?:'([^']*)')?[^#]*#(.*)$")
    parsing=False
    
    args_w_param = ['-%s' % _short_args[i-1] for i in range(len(_short_args)) if _short_args[i] == ':'] + ['--'+ar[:-1] for ar in _args if ar[-1] == '=']
    results = []
    for line in open(script_file, 'r'):
        if parsing:
            items = re_entries.match(line)
            if items:
                flag, flag_opt, mesg = items.groups()
                #if multiple flags, all should accept parameters!
                has_param = flag in args_w_param
                if flag_opt: flag = '%s, %s' % (flag, flag_opt)
                if has_param:
                    flag = '%s <value>' % flag
                results.append((flag, mesg))
            if re_end.match(line): break
        elif re_start.match(line): parsing = True

    #Help must be written as just one line comment, here we wrap it properly
    import textwrap
    env = getEnvironment()
    max_length = max([len(i[0]) for i in results])
    wrapper = textwrap.TextWrapper(width=env['columns'], initial_indent='', subsequent_indent=' '*(max_length+5))
    results = [wrapper.fill(('  %-'+str(max_length)+'s: %s') % (flag, mesg)) for flag, mesg in results]
    
    if message: message = ': ' + message
    else: message = ''
    if results: print '%s [opt] query %s\nopt:\n%s' % (script_name, message, '\n'.join(results))
    else: print '%s %s' % (script_name, message)

    print '\n'.join([textwrap.fill(r, width = env['columns'], replace_whitespace=False) for r in ("""
Applies some analysis to the given data.
See https://code.zmaw.de/projects/miklip-d-integration/wiki/Analyze for more information.

The "query" part is a key=value list used for configuring the tool. It's tool dependent so check that tool help.

For Example:
    %s --tool pca eofs=4 bias=False input=myfile.nc outputdir=/tmp/test
""" % script_name).splitlines()])


_short_args = "hnd"
_args = ['tool=', 'list-tools',
    'help', 'debug', 'dry-run',
    'history', 'use-defaults',
    'config-file=', 'save-config=', 'save',
    'show-config','scheduled-id=',
    'mail=', 'batchmode=',]

 

def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv[1:]

    DEBUG = False

    try:
        # Setup argument parser
        args, lastargs = getopt.getopt(argv, _short_args, _args)
        
        #defaults
        help_opt=False
        tool = None
        scheduled_id = None
        env = getEnvironment()
        
        show_config=False
        cfg_file_load = cfg_file_save = None
        dry_run = False
        history=False
        use_user_defaults=True
        batchmode = False
        email = ''
        
        _nothing = object        
        #parse arguments *!!!*
        for flag, arg in args:
            if flag=='-h' or flag=='--help':    #displays this help or that of the given context.
                help_opt=True
            elif flag == '--history':           #provides access to the configuration history (use also --help for more help).
                history = True
            elif flag == '--tool':              #defines which tool should be used (use also --help for more help).
                tool=arg.lower()
            elif flag == '--use-defaults':      #skips user configuration and use system defaults.
                use_user_defaults=False
            elif flag == '--batchmode':         # creates a SLURM job
                mode = arg.lower()
                batchmode = mode in ['true', '1', 'yes', 'on', 'web',]
                
                if not batchmode and mode not in ['false', '0', 'no', 'off',]:
                    raise ValueError('batchmode should be set to one of those {1,0, true, false, yes, no, on, off}')
            elif flag == '--mail':
                email = arg.lower()
            elif flag == '--list-tools':        #lists all available tools.
                import textwrap
                #we just have to show the list and stop processing
                name_width = 0
                for key in pm.getPlugins():
                    name_width = max(name_width, len(key))
                offset = name_width + 2
                for key, plugin in sorted(pm.getPlugins().items()):
                    lines = textwrap.wrap('%s' % plugin['description'], env['columns'] - offset)
                    if not lines: lines = ['No description.']
                    if len(lines) > 1:
                        #multiline
                        print '%s: %s' % (plugin['name'], lines[0] + '\n' + ' '*offset +('\n' + ' '*offset).join(lines[1:]))
                    else:
                        print '%s: %s' % (plugin['name'], lines[0])
                #done
                return 0
            elif flag == '--config-file':       #uses the given configuration file.
                cfg_file_load=arg
            elif flag == '--save-config':       #saves the configuration at the given file path.
                cfg_file_save=arg
                dry_run=True
            elif flag == '--save':              #saves the configuration locally for this user.
                cfg_file_save=_nothing
                dry_run=True
            elif flag == '--show-config':       #shows the resulting configuration (implies dry-run).
                show_config=True
                dry_run=True
            elif flag == '--scheduled-id':      #Runs a scheduled job from database
                scheduled_id = int(arg)
                
            elif flag == '-d' or flag == '--debug': #turn on debugging info and show stack trace on exceptions.
                DEBUG = True
                logging.getLogger().setLevel(logging.DEBUG)
            elif flag == '-n' or flag == '--dry-run':   #dry-run, perform no computation. This is used for viewing and handling the configuration.
                dry_run = True


        if tool and history:
            lastargs.append('tool=%s' % tool)
            tool = None
        
        if tool is None and not history and cfg_file_load:
            #ok, try to infer the tool from the configuration
            from StringIO import StringIO
            if cfg_file_load == '-':
                #reading from stdin so we can read this only once... but we need it twice!
                #buffer it into StringIO 
                cfg_file_load = StringIO(sys.stdin.read())
            else:
                with open(cfg_file_load, 'r') as f:
                    cfg_file_load = StringIO(f.read())
                    
            import re
            results = re.findall('^[ \t]*\[([^\]]*)\]', cfg_file_load.read())
            if len(results) != 1:
                raise AnalyzeError("Can't infer tool name from file. Check the file is ok or use --tool tool_name to define the tool to be used.")
            tool = results[0].lower()
            #reset the buffer
            cfg_file_load.seek(0)
                
        if help_opt:
            if tool:
                plugin = pm.getPluginInstance(tool)
                print plugin.getHelp()
                return 0
            elif history:
                print """Displays the last 10 entries with a one-line compact description.
The first number you see is the entry id, which you might use to select single entries.
To store the resulting configuration user --save-config output_configuration_file.

Arguments
full_text       If present shows the complete configuration stored

limit=n         Where n is the number of entries to be displayed 
                (don't set it or set it to < 0 to display all)

tool=name       Display only entries from tool "name"
since=date      Retrieve entries older than date (see DATE FORMAT)
until=date      Retrieve entries newer than date (see DATE FORMAT)
entry_ids=ids   Select entries whose ids are in "ids"
                (single number or comma separated list, e.g. entry_ids=1,2 or entry_ids=5)

DATE FORMAT
   Dates can be given in "YYYY-MM-DD HH:mm:ss.n" or any less accurate subset of it.
   These are all valid: "2012-02-01 10:08:32.1233431", "2012-02-01 10:08:32",
   "2012-02-01 10:08", "2012-02-01 10", "2012-02-01", "2012-02", "2012".
   
   These are *NOT*: "01/01/2010", "10:34", "2012-20-01"
   
   Missing values are assumed to be the minimal allowed value. For example:
   "2012" == "2012-01-01 00:00:00.0"
   
   Please note that in the shell you need to escape spaces. 
   All these are valid examples (at least for the bash shell):    
   analyze --history since=2012-10-1\ 10:35
   analyze --history since=2012-10-1" "10:35
   analyze --history "since=2012-10-1 10:35"
   analyze --history 'since=2012-10-1 10:35'"""
                return 0
            else:
                auto_doc()
                return 0
        

                
        #get the plugin
        if tool:
                
            
            if cfg_file_save:
                tool_dict = pm.parseArguments(tool,lastargs, use_user_defaults=use_user_defaults, config_file=cfg_file_load, check_errors=False)
                if cfg_file_save == _nothing: cfg_file_save = None 
                save_in = pm.writeSetup(tool, tool_dict, config_file=cfg_file_save)
                log.info("Configuration file saved in %s", save_in)
            elif show_config:
                tool_dict = pm.parseArguments(tool,lastargs, use_user_defaults=use_user_defaults, config_file=cfg_file_load, check_errors=False)
                print pm.getPluginInstance(tool).getCurrentConfig(config_dict=tool_dict)
           
            elif scheduled_id:
                log.debug('Running %s as scheduled in history with ID %i', tool, scheduled_id)
                if not dry_run: 
                    pm.runTool(tool, scheduled_id=scheduled_id)
                                     
            else:
                tool_dict = pm.parseArguments(tool,lastargs, use_user_defaults=use_user_defaults, config_file=cfg_file_load)
                #now run the tool
                log.debug('Running %s with configuration: %s', tool, tool_dict)
                if not dry_run:
                    if batchmode:
                        id = pm.scheduleTool(tool,
                                             config_dict=tool_dict,
                                             user=user.User(email=email))

                        print 'Scheduled job with row id', id
                    else:
                        pm.runTool(tool, config_dict=tool_dict)

            if DEBUG:
                log.debug("Arguments: %s", lastargs)
                import json
                log.debug('Current configuration:\n%s', json.dumps(tool_dict, indent=4))
                
            
        elif history:
            full = False
            limit=10
            since = until = None
            tool_name=None
            entry_ids=None
            store_file=cfg_file_save
            for args in lastargs:
                tmp = args.split('=')
                flag = tmp[0]
                arg = '='.join(tmp[1:]) if len(tmp) > 1 else None
                if flag == 'full_text':
                    full = True
                elif flag == 'limit':
                    limit=int(arg)
                elif flag == 'tool':
                    tool_name=arg
                elif flag == 'since':
                    since=HistoryEntry.timestampFromString(arg)
                elif flag == 'until':
                    until=HistoryEntry.timestampFromString(arg)
                elif flag == 'entry_ids':
                    entry_ids=map(int,arg.split(','))
                else:
                    mesg = "There's no valid argument named '%s' in the history management mode." % flag 
                    similar_words = find_similar_words(flag, 'full_text limit tool since until entry_ids'.split())
                    if similar_words: mesg = "%s\n Did you mean this?\n\t%s" % (mesg, '\n\t'.join(similar_words))
                    raise AnalyzeError(mesg)
                    
            log.debug('history of %s, limit=%s, since=%s, until=%s, entry_ids=%s',tool_name,limit, since, until, entry_ids)
            rows = pm.getHistory(user=None, plugin_name=tool_name, limit=limit, since=since, until=until, entry_ids=entry_ids)
            if rows:
                if store_file:                
                    if len(rows) > 1:
                        raise AnalyzeError("Can only store one configuration at a time. We got %s back.\n" % len(rows) +
                                           "Trim your search and try again (better if you use entry_ids with a single id).")
                    
                    entry = rows[0]
                    tool = pm.getPluginInstance(entry.tool_name)
                    saved_in = pm.writeSetup(entry.tool_name, entry.configuration, config_file=store_file)
                    log.info("Configuration stored in %s",  saved_in)
                else:
                    print '\n'.join([row.__str__(compact=not full) for row in rows])
            else:
                log.error("No results. Check query.")
                
        else:
            #if no tool selected display the help.
            auto_doc()
            return 0

    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except getopt.GetoptError as e:
        #Did you mean funtionality
        similar_words = None
        if len(e.opt) > 1:
            trimmed_args = []
            for arg in _args:
                if arg[-1] == '=': trimmed_args.append(arg[:-1])
                else: trimmed_args.append(arg)
            similar_words = find_similar_words(e.opt, trimmed_args)
        mesg = e.msg
        if similar_words: mesg = "%s\n Did you mean this?\n\t%s" % (mesg, '\n\t'.join(similar_words))
        print mesg

        return 2
    except Exception as e:                    
        if isinstance(e, IOError) and e.errno == 32:
            #this is just a broken pipe, which mean the stdout was closed 
            #(e.g when using head after 10 lines are read)
            #just stop normally
            return 0
        if DEBUG or __name__ != "__main__":
            raise
        else: print "ERROR: ", sys.exc_info()[1]
        return 2

if __name__ == "__main__":
    sys.exit(main())
