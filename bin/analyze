#!/usr/bin/env python
# encoding: utf-8
'''
find_files -- find files from the miklip baselines

@copyright:  2012 FU Berlin. All rights reserved.
        
@contact:    estanislao.gonzalez@met.fu-berlin.de

@license:    BSD

Copyright (c) 2012, FU Berlin
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this 
    list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY 
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.
'''

import sys
import getopt
import logging
log = logging.getLogger(__name__)
if not log.handlers:
    logging.basicConfig(level=logging.INFO)
import evaluation_system.api.plugin_manager as pm

__version__ = 0.3
__date__ = '2012-11-26'
__updated__ = '2012-12-11'


class AnalyzeError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg, show_help=True):
        super(AnalyzeError).__init__(type(self))
        auto_doc()
        self.msg = " %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def call(cmd_str):
    from subprocess import Popen, PIPE
    return Popen(cmd_str.split(), stdout=PIPE, stderr=PIPE).communicate()
    
def getEnvironment():
    """Parses required variablems from the environment and return a dictionary of them"""
    result = {}
    console_size = call('stty size')[0]
    if console_size:
        rows, columns = console_size.strip().split()
        rows, columns = int(rows), int(columns)
    else:
        rows, columns = 25, 80
    
    result['rows'] = rows
    result['columns'] = columns
    return result

def auto_doc(message=None):
    import re, os
    script_file = sys.argv[0]
    script_name = os.path.basename(script_file)
    #check if in unit tests (runfiles.py is starting the unit test)
    if script_name == 'runfiles.py':
        print "No auto doc for unit test."
        return
    
    re_start = re.compile('.*\*!!!\*$')
    re_end = re.compile('^[ \t]*$')
    re_entries= re.compile("^[^']*'([^']*)'[^']*(?:'([^']*)')?[^#]*#(.*)$")
    parsing=False
    results = []
    for line in open(script_file, 'r'):
        if parsing:
            items = re_entries.match(line)
            if items:
                flag, flag_opt, mesg = items.groups()
                if flag_opt: flag = '%s, %s' % (flag, flag_opt)
                results.append('  %-20s : %s' % (flag, mesg))
            if re_end.match(line): break
        elif re_start.match(line): parsing = True

    if message: message = ': ' + message
    else: message = ''
    if results: print '%s [opt] query %s\nopt:\n%s' % (script_name, message, '\n'.join(results))
    else: print '%s %s' % (script_name, message)

    print """
Applies some analysis to the given data. See https://code.zmaw.de/projects/miklip-d-integration/wiki/Analyze
for more information.
 
For Example:
    %s --tool pca eofs=4 bias=False input=myfile.nc outputdir=/tmp/test
""" % script_name



def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv[1:]

    try:
        # Setup argument parser
        args, lastargs = getopt.getopt(argv, "hnd", ['tool=', 'list-tools',
                                                    'help', 'debug', 'dry-run',
                                                    'config-file=', 'save-config'])
        
        #defaults
        DEBUG = False
        help_opt=False
        tool = None
        env = getEnvironment()
        if 'columns' not in env: env['columns'] = 80
        save_config=False
        cfg_file = None
        dry_run = False
        #parse arguments *!!!*
        for flag, arg in args:
            if flag=='-h' or flag=='--help':    #Displays the context help (use tool to display the tool help)
                help_opt=True
            elif flag == '--tool':              #define which tool should be used
                tool=arg.lower()
            elif flag == '--list-tools':        #show all available tools
                import textwrap
                #we just have to show the list and stop processing
                name_width = 0
                for key in pm.getPlugins():
                    name_width = max(name_width, len(key))
                offset = name_width + 2
                for key, plugin in pm.getPlugins().items():
                    lines = textwrap.wrap('%s' % plugin['description'], env['columns'] - offset)
                    if len(lines) > 1:
                        #multiline
                        print '%s: %s' % (plugin['name'], lines[0] + '\n' + ' '*offset +('\n' + ' '*offset).join(lines[1:]))
                    else:
                        print '%s: %s' % (plugin['name'], lines[0])
                #done
                return 0
            elif flag == '--config-file':       #use the given config file instead of the default one
                cfg_file=arg
            elif flag == '--save-config':       #save the configuration
                save_config=True
            elif flag == '-d' or flag == '--debug': #turn on debuging info
                DEBUG = True
                logging.getLogger().setLevel(logging.DEBUG)
            elif flag == '-n' or flag == '--dry-run':   #dry-run, perform no computation. This is used for viewing and handling the configuration.
                dry_run = True

        
        
        if help_opt:
            if tool:
                plugin = pm.getPluginInstance(tool)
                print plugin.getHelp()
                return 0
            else:
                auto_doc()
                return 0
        
        
        #get the plugin
        if tool: 
            tool_dict = pm.parseArguments(tool,lastargs, use_user_defaults=True, config_file=cfg_file)
            if DEBUG:
                import json
                print "Current configuration:"
                print json.dumps(tool_dict, indent=4)
            
            if save_config:
                save_in = pm.writeSetup(tool, tool_dict, config_file=cfg_file)
                log.info("Configuration file saved in %s", save_in)
            
            #now run the tool
            log.debug('Running %s with configuration: %s', tool, tool_dict)
            if not dry_run: pm.runTool(tool, config_dict=tool_dict)
        else:
            #if no tool selected display the help.
            auto_doc()
            return 0
            
        
    except getopt.error:
        print sys.exc_info()[:3]
        return 1

    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception as e:
        if isinstance(e, IOError) and e.errno == 32:
            #this is just a broken pipe, which mean the stdout was closed 
            #(e.g when using head after 10 lines are read)
            #just stop normally
            return 0
        if DEBUG or __name__ != "__main__":
            raise
        else: print sys.exc_info()[1]
        return 2

if __name__ == "__main__":
    sys.exit(main())
