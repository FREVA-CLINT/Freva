#!/usr/bin/env python
# encoding: utf-8
'''
tutorials -- show some tutorials on the terminal (terminal recordings)

@copyright:  2012 FU Berlin. All rights reserved.
        
@contact:    estanislao.gonzalez@met.fu-berlin.de

@license:    BSD

Copyright (c) 2012, FU Berlin
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this 
    list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY 
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.
'''

import sys
import os
import getopt
import inspect
import logging
log = logging.getLogger(__name__)
if not log.handlers:
    class SpecialFormatter(logging.Formatter):
        FORMATS = {logging.DEBUG :"DBG: %(module)s: %(lineno)d: %(message)s",
                   logging.ERROR : "ERROR: %(message)s",
                   logging.INFO : "%(message)s",
                   'DEFAULT' : "%(levelname)s: %(message)s"}
    
        def format(self, record):
            self._fmt = self.FORMATS.get(record.levelno, self.FORMATS['DEFAULT'])
            return logging.Formatter.format(self, record)
        
    hdlr = logging.StreamHandler(sys.stderr)
    hdlr.setFormatter(SpecialFormatter())
    logging.root.addHandler(hdlr)
    logging.root.setLevel(logging.INFO)
    
from evaluation_system.misc.utils import find_similar_words
from evaluation_system.tutorials.io import Player
__version__ = 0.1
__date__ = '2013-02-10'



class AnalyzeError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg, show_help=True):
        super(AnalyzeError).__init__(type(self))
        self.msg = " %s\nUse --help to get help." % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def call(cmd_str):
    from subprocess import Popen, PIPE
    return Popen(cmd_str.split(), stdout=PIPE, stderr=PIPE).communicate()
    
def getEnvironment():
    """Parses required variablems from the environment and return a dictionary of them"""
    result = {}
    console_size = call('stty size')[0]
    if console_size:
        rows, columns = console_size.strip().split()
        rows, columns = int(rows), int(columns)
    else:
        rows, columns = 25, 80
    
    result['rows'] = rows
    result['columns'] = columns
    return result

TTYREC_SUFFIX = '.ttyrec'
ASCII_SUFFIX = '.rec'

SHORTCUTS = """The recording can be controlled via the following key-shortcuts:
    q            := quits 
    p . <space>  := pauses the tutorial
    f <next page>:= accelerates playback
    s <prev page>:= slows playback
"""
def auto_doc(message=None):
    import re
    script_file = sys.argv[0]
    script_name = os.path.basename(script_file)
    #check if in unit tests (runfiles.py is starting the unit test)
    if script_name == 'runfiles.py':
        print "No auto doc for unit test."
        return
    
    re_start = re.compile('.*\*!!!\*$')
    re_end = re.compile('^[ \t]*$')
    re_entries= re.compile("^[^']*'([^']*)'[^']*(?:'([^']*)')?[^#]*#(.*)$")
    parsing=False
    
    args_w_param = ['-%s' % _short_args[i-1] for i in range(len(_short_args)) if _short_args[i] == ':'] + ['--'+ar[:-1] for ar in _args if ar[-1] == '=']
    results = []
    for line in open(script_file, 'r'):
        if parsing:
            items = re_entries.match(line)
            if items:
                flag, flag_opt, mesg = items.groups()
                #if multiple flags, all should accept parameters!
                has_param = flag in args_w_param
                if flag_opt: flag = '%s, %s' % (flag, flag_opt)
                if has_param:
                    flag = '%s <value>' % flag
                results.append((flag, mesg))
            if re_end.match(line): break
        elif re_start.match(line): parsing = True

    #Help must be written as just one line comment, here we wrap it properly
    import textwrap
    env = getEnvironment()
    max_length = max([len(i[0]) for i in results])
    wrapper = textwrap.TextWrapper(width=env['columns'], initial_indent='', subsequent_indent=' '*(max_length+5))
    results = [wrapper.fill(('  %-'+str(max_length)+'s: %s') % (flag, mesg)) for flag, mesg in results]
    
    if message: message = ': ' + message
    else: message = ''
    if results: print '%s [opt] query %s\nopt:\n%s' % (script_name, message, '\n'.join(results))
    else: print '%s %s' % (script_name, message)

    print '\n'.join([textwrap.fill(r, width = env['columns'], replace_whitespace=False) for r in ("""
Displays some tutorials on the terminal. %s""" % SHORTCUTS).splitlines()])



_short_args = "hldt:"
_args = ['tutorial=', 'list', 'help', 'debug']
def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv[1:]

    DEBUG = False
    tutorial = external_file = None
    show_list = False
    
    try:
        # Setup argument parser
        args, _ = getopt.getopt(argv, _short_args, _args)
        
        _nothing = object        
        #parse arguments *!!!*
        for flag, arg in args:
            if flag=='-h' or flag=='--help':            #displays this help or that of the given context.
                auto_doc()
                return 0
            elif flag == '-t' or flag == '--tutorial':  #defines which tool should be used (use also --help for more help).
                tutorial=arg
            elif flag == '-l' or flag == '--list':      #lists all available tutorials.
                show_list = True
            elif flag == '-f' or flag == '--file':      #load the following tutorial
                external_file = arg
            elif flag == '-d' or flag == '--debug':     #turn on debugging info and show stack trace on exceptions.
                DEBUG = True
                logging.getLogger().setLevel(logging.DEBUG)


        recordings_path = os.path.dirname(os.path.abspath(inspect.getframeinfo(
                               inspect.currentframe()).filename)) + '/../tutorials/recordings'
        tut_path = None
        is_ascii = True
        if not tutorial:
            if external_file:
                if os.path.isfile(external_file):
                    tut_path = external_file
                else:
                    print "Cannot find file %s" % external_file
                    return 1
            else:
                if not show_list:
                    print "You must select a tutorial."
                tutorials = set([f[:-len(TTYREC_SUFFIX)] for f in os.listdir(recordings_path) if f.endswith(TTYREC_SUFFIX)]\
                    + [f[:-len(ASCII_SUFFIX)] for f in os.listdir(recordings_path) if f.endswith(ASCII_SUFFIX)])
                if tutorials:
                    print "List of available tutorials:\n\t" + '\n\t'.join(tutorials)
                else:
                    print "No tutorials available"
        else:
            from glob import glob
            tut_path = glob(os.path.normpath('%s/%s%s' % (recordings_path, tutorial, ASCII_SUFFIX)))
            tut_name = None
            if not tut_path:
                tut_path = glob(os.path.normpath('%s/%s%s' % (recordings_path, tutorial, TTYREC_SUFFIX)))
                is_ascii = False
                 
            if tut_path:
                if len(tut_path)==1:
                    if is_ascii:
                        tut_name = os.path.basename(tut_path[0][:-len(ASCII_SUFFIX)])
                    else: 
                        tut_name = os.path.basename(tut_path[:-len(TTYREC_SUFFIX)])
                    tut_path = tut_path[0]
                else:
                    print "Too many similar tutorials, please select only one."
            else:
                print "Unknown tutorial: %s" % tutorial

        if tut_path:
            p = Player()
            p.load(tut_path, ascii=is_ascii)
            #show some help
            print "Displaying %s" % tut_name
            print SHORTCUTS
            raw_input("Hit <ENTER> to start the tutorial.\n(Ctrl-C to abort any time).\n")
            p.play()


    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except getopt.GetoptError as e:
        #Did you mean funtionality
        similar_words = None
        if len(e.opt) > 1:
            trimmed_args = []
            for arg in _args:
                if arg[-1] == '=': trimmed_args.append(arg[:-1])
                else: trimmed_args.append(arg)
            similar_words = find_similar_words(e.opt, trimmed_args)
        mesg = e.msg
        if similar_words: mesg = "%s\n Did you mean?\n\t%s" % (mesg, '\n\t'.join(similar_words))
        print mesg

        return 2
    except Exception as e:                    
        if isinstance(e, IOError) and e.errno == 32:
            #this is just a broken pipe, which mean the stdout was closed 
            #(e.g when using head after 10 lines are read)
            #just stop normally
            return 0
        if DEBUG or __name__ != "__main__":
            raise
        else: print "ERROR: ", sys.exc_info()[1]
        return 2

if __name__ == "__main__":
    sys.exit(main())
