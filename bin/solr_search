#!/usr/bin/env python
# encoding: utf-8

'''
crawl_my_data - Sets path to crawl a useres data

@copyright:  2015 FU Berlin. All rights reserved.
        
@contact:    sebastian.illing@met.fu-berlin.de

@license:    BSD

Copyright (c) 2015, FU Berlin
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this 
    list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY 
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.
'''

import logging,sys
from evaluation_system.commands import BaseCommand
from evaluation_system.model.solr import SolrFindFiles

class SolrSearch(BaseCommand):
    _short_args = 'hd'
    _args = ['baseline=', 'help', 'debug', 'multiversion',
        'observations', 'reanalysis', 'cmip5', 'baseline0', 'baseline1', 'projectdata', 'miklip', 'prototype', 'cordex', 'modulec'
        'batch-size=', 'attributes', 'facet=', 'all-facets', 'count-facet-values',
        'relevant-only']
    __short_description__ = """
The query is of the form key=value. <value> might use *, ? as wildcards or any regular expression encclosed in forward slashes. Depending on your shell and the symbols used, remeber to escape the sequences properly. 
The safest would be to enclosed those in single quotes.

For Example:
    %s --baseline 0 model=MPI-ESM-LR experiment=/decadal200[0-3]/ time_frequency=*hr variable='/ta|tas|vu/'"""

    def _run(self):
        
        args = self.args 
        lastargs = self.last_args
        DEBUG = False   
        # Setup argument parser
        #defaults
        baseline = 0
        latest=True
        drs_struct=None
        batch_size=10000
        facets = []
        show_facet_count=False
        show_only_attributes = False
        relevant_only = False
        #parse arguments *!!!*
        for flag, arg in args:
            if flag == '--baseline':              #search for baseline n data 
                try:
                    baseline = int(arg)
                    drs_struct = {0: mf.BASELINE0, 1:mf.BASELINE1}[baseline]
                except:
                    print "Can't parse baseline argument '%s'. It should be 0 or 1." % arg
                    return 1
            elif flag == '--baseline0':             #alias, same as --baseline 0
                drs_struct = mf.BASELINE0
            elif flag == '--baseline1':             #alias, same as --baseline 1
                drs_struct = mf.BASELINE1
            elif flag == '--cmip5':                 #search for cmip5 data (includes baseline 0)
                drs_struct = mf.CMIP5
            elif flag == '--observations':          #search for observational data
                drs_struct = mf.OBSERVATIONS
            elif flag == '--projectdata':           #search for project  data
                drs_struct = mf.PROJECTDATA
            elif flag == '--miklip':           	    #search for miklip  data
                drs_struct = mf.MIKLIP
            elif flag == '--prototype':             #search for prototype  data
                drs_struct = mf.PROTOTYPE
            elif flag == '--cordex':           	    #search for cordex  data
                drs_struct = mf.CORDEX
            elif flag == '--modulec':        	    #search for module c  data
                drs_struct = mf.MODULEC    
            elif flag == '--reanalysis':            #search for reanalysis data
                drs_struct = mf.REANALYSIS
            elif flag == '--multiversion':          #select not only the latest version but all of them
                latest=False
            elif flag == '--relevant-only':         #show only facets that filter results (i.e. >1 possible values)
                relevant_only=True
            elif flag == '--batch-size':            #Number of files to retrieve
                batch_size=int(arg)
            elif flag == '--count-facet-values':    #Show the number of files for each values in each facet
                show_facet_count=True
            elif flag == '--attributes':            #retrieve all possible attributes for the current search instead of the files
                if facets != []:
                    raise Exception("Cannot select attributes if facets already selected.")
                show_only_attributes = True
            elif flag == '--all-facets':            #retrieve all facets (attributes & values) instead of the files (same as --facet '*', or --facet all, or --facet any)
                if show_only_attributes:
                    raise Exception("Cannot select facet if attributes already selected.")
                facets = None
            elif flag == '--facet':                 #retrieve these facets (attributes & values) instead of the files 
                if show_only_attributes:
                    raise Exception("Cannot select facet if attributes already selected.")
                if facets is not None:
                    if arg == '*' or arg.lower() == 'all' or arg.lower() == 'any':
                        facets = None
                    else:
                        facets.append(arg)
            elif flag == '-d' or flag == '--debug': #turn on debugging info
                DEBUG = True
                logging.getLogger().setLevel(logging.DEBUG)
        
        search_dict = {}
        for arg in lastargs:
            if '=' not in arg:
                raise CommandError("Invalid format for query: %s" % arg)
            
            items = arg.split('=')
            key, value = items[0], ''.join(items[1:])

            if key not in search_dict:
                search_dict[key] = value
            else:
                if not isinstance(search_dict[key], list):
                    search_dict[key] = [search_dict[key]]
                search_dict[key].append(value)
        
        if 'version' in search_dict and latest:
            #it makes no sense to look for a specific version just among the latest
            #the speedup is marginal and it might not be what the user expects
            sys.stderr.write('Turning latest of when searching for a specific version.')
            latest = False
            

        if drs_struct:
            search_dict['data_type'] = drs_struct
            
        logging.debug("Searching dictionary: %s\n", search_dict)

        #flush stderr in case we have something pending
        sys.stderr.flush()

        if facets != [] and not show_only_attributes:
            if 'facet.limit' in search_dict:
                facet_limit = int(search_dict['facet.limit'])
            else:  
                #default
                facet_limit = 1000
                search_dict['facet.limit'] = -1
                
            for att,values in SolrFindFiles.facets(facets=facets, latest_version=latest, **search_dict).items():
                
                
                #values come in pairs: (value, count)
                value_count = len(values)/2
                if relevant_only and value_count < 2: continue
                
                if show_facet_count:
                    sys.stdout.write('%s: %s' % (att, ','.join(['%s (%s)' % (v,c) for v,c in zip(*[iter(values)]*2)])))
                else:
                    sys.stdout.write('%s: %s' % (att, ','.join(values[::2])))
                
                if value_count == facet_limit: 
                    sys.stdout.write('...')
                
                sys.stdout.write('\n')
                sys.stdout.flush()
        elif show_only_attributes:
            #select all is none defined but this flag was set
            if facets == []: facets = None
            results = SolrFindFiles.facets(facets=facets, latest_version=latest, **search_dict)
            if relevant_only:
                atts = ', '.join([k for k in results if len(results[k]) > 2])
            else:
                atts = ', '.join(SolrFindFiles.facets(facets=facets, latest_version=latest, **search_dict))
            sys.stdout.write(atts)
            sys.stdout.write('\n')
            sys.stdout.flush()
        else:
            #find the files and display them
            for f in SolrFindFiles.search(batch_size=batch_size, latest_version=latest, **search_dict):
                sys.stdout.write(str(f))
                sys.stdout.write('\n')
                sys.stdout.flush()



if __name__ == "__main__":
    print '''WARNING: "solr_search" is deprecated.
          Use "freva --databrowser" instead (For more information see freva --help)'''
    #SolrSearch().run()







