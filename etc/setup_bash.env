#!/bin/bash
#workaround for csh & co (not nice since path must be hard coded ($_ doesn't work as required)
[ "$?shell" = "1" ] && echo "** This file was intended to be sourced in a bash shell. Switching now to one **" && bash --login -c 'source /miklip/integration/evaluation_system/etc/setup_bash.env; bash' && exit

#make sure this file is being sourced and not run
if [[ "$(basename -- "$0")" != "-bash" && "$(basename -- "$0")" != "bash" ]]; then
    echo "This file is intended to be sourced in a bash shell. Use:"
    echo "$ source $0"
    exit 1
fi

#check we are being sourced or die
[[ $BASH_ARGV ]] || { echo "Source this file using: source $0"; exit 1; }

SCRIPTPATH=$( cd $(dirname $BASH_ARGV) ; pwd -P )
TOOLPATH=$(dirname $SCRIPTPATH)
#This is the general case, but we know the name (and works better if the directory name is somehow different.
#TOOLNAME=$(basename $TOOLPATH)
TOOLNAME=evaluation_system

#add the current modules to the path
module use -a $TOOLPATH/modules

#load the tool module
module load $TOOLNAME

#cat <<EOF
#Environment successfully loaded.
#We haven't messed with your environment though. If you see any problem try resetting it using:
#$ module purge
#
#And then trying again.
#
#$(if [[ -d $TOOLPATH/doc ]]; then
#    echo "Check $TOOLNAME's documentation in $TOOLPATH/doc:"
#    ls $TOOLPATH/doc
#fi)
#
#There are new modules available:
#$(for tool in $(module -t avail 2>&1 | sed -n '/evaluation_system/,/^$/{/\/modules/!p}'); do
#    #it always add an empty row... remove it
#    module whatis $tool 2>&1|sed '/^$/d'
#done
#)
#
cat <<EOF
Evaluation System successfully loaded.

New available commands:
$(for command in $(ls -1  $TOOLPATH/bin); do echo '* ' $command; done)
 
To get help use: 
<command> --help

For more help/information check: https://code.zmaw.de/projects/miklip-d-integration/wiki
EOF

